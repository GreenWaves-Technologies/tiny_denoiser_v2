#!/usr/bin/env python3

import argparse
import gv.gvsoc_control as gvsoc

parser = argparse.ArgumentParser(description='Control GVSOC')

parser.add_argument("--host", dest="host", default="localhost", help="Specify host name")
parser.add_argument("--port", dest="port", default=30000, type=int, help="Specify host port")
parser.add_argument("--wav_in", required=True, type=str, help="Specify the relative path to the input wav file")
parser.add_argument("--wav_out", required=True, type=str, help="Specify the relative path to the output wav file")
parser.add_argument("--duration", dest="duration", default=1800000000000, type=int, help="Specify the relative path to the folder containing the outputs")
args = parser.parse_args()


gv = gvsoc.Proxy(args.host, args.port)

testbench = gvsoc.Testbench(gv)

# Open SAI interfaces in PDM mode
i2s_in = testbench.i2s_get(1)
i2s_in.open(is_pdm=True)
i2s_out = testbench.i2s_get(2)
i2s_out.open(is_pdm=True) #  , sampling_freq=3072000)

# Setup channel 0 RX with input PDM binary file
i2s_in.slot_open(slot=2, is_rx=True, word_size=32)
# Wav file as input - Pcm to Pdm conversion
# Set modulation params
i2s_in.slot_rx_file_reader(
    slot=2,
    filetype="wav",
    filepath=args.wav_in,
    width=16,
    interpolation_ratio_shift = 6,
    interpolation_type = 'linear'
)

# Setup channel 0 as PDM Tx
i2s_out.slot_open(slot=0, is_rx=False, word_size=32)
# Wav file as output - Pdm to Pcm conversion
i2s_out.slot_tx_file_dumper(
    slot=0,
    filetype="wav",
    filepath=args.wav_out,
    width=32,
    cic_n = 8,
    cic_m = 2,
    cic_r = 64,
    cic_shift = 24,
    wav_sampling_freq = 48000
)
# CIC_N = 8; CIC_M = 2; CIC_R = 64; CIC_Shift = 27


# Run for 3 s
gv.run(args.duration)

# Stop the clock and the RX slot
i2s_in.slot_close(slot=2)
i2s_out.slot_close(slot=0)
i2s_in.close()
i2s_out.close()

gv.quit()
gv.close()
